// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNativeMaterialUi = require("react-native-material-ui");

function make(uiTheme, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.ThemeProvider, {
              uiTheme: {
                palette: {
                  primaryColor: uiTheme[/* palette */0][/* primaryColor */0]
                }
              }
            }, children);
}

var ThemeProvider = /* module */[/* make */make];

function make$1(actions, onPress, onLongPress, hidden, icon, transition, style, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.ActionButton, {
              actions: Js_undefined.fromOption(actions),
              onPress: Js_undefined.fromOption(onPress),
              onLongPress: Js_undefined.fromOption(onLongPress),
              hidden: hidden !== undefined && hidden ? true : false,
              icon: Js_undefined.fromOption(icon),
              transition: Js_undefined.fromOption(transition !== undefined ? (
                      transition ? "speedDial" : "toolbar"
                    ) : undefined),
              style: Js_undefined.fromOption(style)
            }, children);
}

var ActionButton = /* module */[/* make */make$1];

function centerElement(secondaryText, tertiaryText, primaryText) {
  return /* record */[
          /* primaryText */primaryText,
          /* secondaryText */secondaryText,
          /* tertiaryText */tertiaryText
        ];
}

function make$2(divider, onPress, centerElement, leftElement, rightElement, children) {
  var tmp;
  if (centerElement !== undefined) {
    var centerElement$1 = centerElement;
    var dict = { };
    dict["primaryText"] = centerElement$1[/* primaryText */0];
    var match = centerElement$1[/* secondaryText */1];
    if (match !== undefined) {
      dict["secondaryText"] = match;
    }
    tmp = Caml_option.some(dict);
  } else {
    tmp = undefined;
  }
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.ListItem, {
              divider: divider !== undefined && divider ? true : false,
              onPress: Js_undefined.fromOption(onPress),
              centerElement: Js_undefined.fromOption(tmp),
              leftElement: Js_undefined.fromOption(leftElement),
              rightElement: Js_undefined.fromOption(rightElement)
            }, children);
}

var ListItem = /* module */[
  /* centerElement */centerElement,
  /* make */make$2
];

function make$3(text, inset, lines, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.Subheader, {
              text: text,
              inset: inset !== undefined && inset ? true : false,
              lines: Js_undefined.fromOption(lines)
            }, children);
}

var Subheader = /* module */[/* make */make$3];

function make$4(color, underlayColor, maxOpacity, percent, disabled, size, name, onPress, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.IconToggle, {
              color: Js_undefined.fromOption(color),
              maxOpacity: Js_undefined.fromOption(maxOpacity),
              percent: Js_undefined.fromOption(percent),
              underlayColor: Js_undefined.fromOption(underlayColor),
              disabled: disabled !== undefined && disabled ? true : false,
              size: Js_undefined.fromOption(size),
              name: name,
              onPress: Js_undefined.fromOption(onPress)
            }, children);
}

var IconToggle = /* module */[/* make */make$4];

function optionBoolToJsBool(option) {
  if (option !== undefined && option) {
    return true;
  } else {
    return false;
  }
}

function make$5(disabled, raised, primary, accent, onPress, onLongPress, text, upperCase, icon, style, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.Button, {
              disabled: optionBoolToJsBool(disabled),
              raised: optionBoolToJsBool(raised),
              primary: optionBoolToJsBool(primary),
              accent: optionBoolToJsBool(accent),
              onPress: Js_undefined.fromOption(onPress),
              onLongPress: Js_undefined.fromOption(onLongPress),
              text: text,
              upperCase: Js_undefined.fromOption(upperCase),
              icon: Js_undefined.fromOption(icon),
              style: Js_undefined.fromOption(style)
            }, children);
}

var Button = /* module */[/* make */make$5];

function make$6(label, value, checked, disabled, onSelect, onCheck, theme, style, children) {
  return ReasonReact.wrapJsForReason(ReactNativeMaterialUi.RadioButton, {
              label: label,
              value: value,
              checked: optionBoolToJsBool(checked),
              disabled: optionBoolToJsBool(disabled),
              onSelect: Js_undefined.fromOption(onSelect),
              onCheck: Js_undefined.fromOption(onCheck),
              theme: Js_undefined.fromOption(theme),
              style: Js_undefined.fromOption(style)
            }, children);
}

var RadioButton = /* module */[/* make */make$6];

exports.ThemeProvider = ThemeProvider;
exports.ActionButton = ActionButton;
exports.ListItem = ListItem;
exports.Subheader = Subheader;
exports.IconToggle = IconToggle;
exports.optionBoolToJsBool = optionBoolToJsBool;
exports.Button = Button;
exports.RadioButton = RadioButton;
/* ReasonReact Not a pure module */
